<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java学习笔记（二）</title>
      <link href="/post/4d222197.html"/>
      <url>/post/4d222197.html</url>
      
        <content type="html"><![CDATA[<h3 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 class 类名&#123;</span><br><span class="line">程序代码       //输入你的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注释语句"><a href="#注释语句" class="headerlink" title="注释语句"></a>注释语句</h3><ul><li><p>作用：对程序进行解释说明，不影响程序执行</p></li><li><p>分类</p><ul><li><p>单行注释:       &#x2F;&#x2F;——-</p></li><li><p>多行注释：     &#x2F;* *&#x2F;</p></li><li><p>文档注释：  &#x2F;**  *&#x2F;</p><p>注意：文档注释的内容可以提取到文档说明书中去</p></li></ul></li><li><p>为什么不影响程序执行？答：编译后的.class文件没有注释</p></li></ul><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><ul><li><p>目的：约束变量只能存储什么类型的数据，帮助定义出不同类型的变量</p></li><li><p>分类：六种数字类型（四个整数型，两个浮点型），一种字符类型，一种布尔型，一个值null（表示引用对象为空）。</p></li><li><p>分为：</p><ul><li>引用数据类型</li></ul><p></p><p><strong>String</strong></p><ul><li>基本数据类型</li></ul><p><strong>byte：</strong>占1个字节内存</p><ul><li><p>byte 数据类型是8位、有符号的，以二进制补码表示的整数；</p></li><li><p>最小值是 <strong>-128（-2^7）</strong>；</p></li><li><p>最大值是 <strong>127（2^7-1）</strong>；</p></li><li><p>默认值是 <strong>0</strong>；</p></li><li><p>byte 类型用在大型数组中节约空间，主要代替整数，因为 byte 变量占用的空间只有 int 类型的四分之一；</p></li><li><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> -<span class="number">50</span>;</span><br></pre></td></tr></table></figure></li></ul><p><strong>short：</strong>占2个字节内存</p><ul><li><p>short 数据类型是 16 位、有符号的以二进制补码表示的整数</p></li><li><p>最小值是 <strong>-32768（-2^15）</strong>；</p></li><li><p>最大值是 <strong>32767（2^15 - 1）</strong>；</p></li><li><p>Short 数据类型也可以像 byte 那样节省空间。一个short变量是int型变量所占空间的二分之一；</p></li><li><p>默认值是 <strong>0</strong>；</p></li><li><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"><span class="type">short</span> <span class="variable">r</span> <span class="operator">=</span> -<span class="number">20000</span>;</span><br></pre></td></tr></table></figure></li></ul><p><strong>int：</strong>占4个字节内存</p><ul><li><p>int 数据类型是32位、有符号的以二进制补码表示的整数；</p></li><li><p>最小值是 <strong>-2,147,483,648（-2^31）</strong>；</p></li><li><p>最大值是 <strong>2,147,483,647（2^31 - 1）</strong>；</p></li><li><p>一般地整型变量默认为 int 类型；</p></li><li><p>默认值是 <strong>0</strong> ；</p></li><li><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">100000</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> -<span class="number">200000</span>;</span><br></pre></td></tr></table></figure></li></ul><p><strong>long：</strong>占8个字节内存</p><ul><li><p>long 数据类型是 64 位、有符号的以二进制补码表示的整数；</p></li><li><p>最小值是 <strong>-9,223,372,036,854,775,808（-2^63）</strong>；</p></li><li><p>最大值是 <strong>9,223,372,036,854,775,807（2^63 -1）</strong>；</p></li><li><p>这种类型主要使用在需要比较大整数的系统上；</p></li><li><p>默认值是 <strong>0L</strong>；</p></li><li><p>例子： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">100000L</span>;</span><br><span class="line"><span class="type">long</span> <span class="variable">b</span> <span class="operator">=</span> -<span class="number">200000L</span>;</span><br></pre></td></tr></table></figure><p>注意：”L”理论上不分大小写，但是若写成”l”容易与数字”1”混淆，不容易分辩。所以最好大写。</p></li></ul><p><strong>float：</strong>占4个字节内存</p><ul><li><p>float 数据类型是单精度、32位、符合IEEE 754标准的浮点数；</p></li><li><p>float 在储存大型浮点数组的时候可节省内存空间；</p></li><li><p>默认值是 <strong>0.0f</strong>；</p></li><li><p>浮点数不能用来表示精确的值，如货币；</p></li><li><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="number">234.5f</span>;</span><br></pre></td></tr></table></figure></li></ul><p><strong>double：占8个字节内存</strong></p><ul><li><p>double 数据类型是双精度、64 位、符合 IEEE 754 标准的浮点数；</p></li><li><p>浮点数的默认类型为 double 类型；</p></li><li><p>double类型同样不能表示精确的值，如货币；</p></li><li><p>默认值是 <strong>0.0d</strong>；</p></li><li><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span>   <span class="variable">d1</span>  <span class="operator">=</span> <span class="number">7D</span> ;</span><br><span class="line"><span class="type">double</span>   <span class="variable">d2</span>  <span class="operator">=</span> <span class="number">7.</span>; </span><br><span class="line"><span class="type">double</span>   <span class="variable">d3</span>  <span class="operator">=</span>  <span class="number">8.0</span>; </span><br><span class="line"><span class="type">double</span>   <span class="variable">d4</span>  <span class="operator">=</span>  <span class="number">8.D</span>; </span><br><span class="line"><span class="type">double</span>   <span class="variable">d5</span>  <span class="operator">=</span>  <span class="number">12.9867</span>; </span><br></pre></td></tr></table></figure><p>注意：7 是一个 int 字面量，而 7D，7. 和 8.0 是 double 字面量。</p></li></ul><p><strong>boolean：</strong>占1个字节内存</p><ul><li><p>boolean数据类型表示一位的信息；</p></li><li><p>只有两个取值：true 和 false；</p></li><li><p>这种类型只作为一种标志来记录 true&#x2F;false 情况；</p></li><li><p>默认值是 <strong>false</strong>；</p></li><li><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">one</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></li></ul><p><strong>char：</strong>占2个字节内存</p><ul><li><p>char 类型是一个单一的 16 位 Unicode 字符；</p></li><li><p>最小值是 <strong>\u0000</strong>（十进制等效值为 0）；</p></li><li><p>最大值是 <strong>\uffff</strong>（即为 65535）；</p></li><li><p>char 数据类型可以储存任何字符；</p></li><li><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">letter</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="特殊的转义字符序列"><a href="#特殊的转义字符序列" class="headerlink" title="特殊的转义字符序列"></a>特殊的转义字符序列</h4><table><thead><tr><th align="left">符号</th><th align="left">字符含义</th></tr></thead><tbody><tr><td align="left">\n</td><td align="left">换行 (0x0a)</td></tr><tr><td align="left">\r</td><td align="left">回车 (0x0d)</td></tr><tr><td align="left">\f</td><td align="left">换页符(0x0c)</td></tr><tr><td align="left">\b</td><td align="left">退格 (0x08)</td></tr><tr><td align="left">\0</td><td align="left">空字符 (0x0)</td></tr><tr><td align="left">\s</td><td align="left">空格 (0x20)</td></tr><tr><td align="left">\t</td><td align="left">制表符</td></tr><tr><td align="left">&quot;</td><td align="left">双引号</td></tr><tr><td align="left">&#39;</td><td align="left">单引号</td></tr><tr><td align="left">\</td><td align="left">反斜杠</td></tr><tr><td align="left">\ddd</td><td align="left">八进制字符 (ddd)</td></tr><tr><td align="left">\uxxxx</td><td align="left">16进制Unicode字符 (xxxx)</td></tr></tbody></table><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li><p>作用：内存中的一块区域，可以存储数据，且数据可变化</p></li><li><p>格式：数据类型  变量名称 &#x3D; 初始值；</p></li><li><p>&#x3D; 赋值：从右往左执行</p></li><li><p>变量类型：</p><ul><li><p>类变量（静态变量）：独立于方法之外的变量，用 static 修饰。</p><ul><li>类变量也称为静态变量，在类中以 static 关键字声明，但必须在方法之外。</li><li>无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。</li><li>静态变量除了被声明为常量外很少使用，静态变量是指声明为 public&#x2F;private，final 和 static 类型的变量。静态变量初始化后不可改变。</li><li>静态变量储存在静态存储区。经常被声明为常量，很少单独使用 static 声明变量。</li><li>静态变量在第一次被访问时创建，在程序结束时销毁。</li><li>与实例变量具有相似的可见性。但为了对类的使用者可见，大多数静态变量声明为 public 类型。</li><li>默认值和实例变量相似。数值型变量默认值是 0，布尔型默认值是 false，引用类型默认值是 null。变量的值可以在声明的时候指定，也可以在构造方法中指定。此外，静态变量还可以在静态语句块中初始化。</li><li>静态变量可以通过：<em>ClassName.VariableName</em>的方式访问。</li><li>类变量被声明为 public static final 类型时，类变量名称一般建议使用大写字母。如果静态变量不是 public 和 final 类型，其命名方式与实例变量以及局部变量的命名方式一致。</li></ul><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="comment">//salary是静态的私有变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">double</span> salary;</span><br><span class="line">    <span class="comment">// DEPARTMENT是一个常量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEPARTMENT</span> <span class="operator">=</span> <span class="string">&quot;开发人员&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    salary = <span class="number">10000</span>;</span><br><span class="line">        System.out.println(DEPARTMENT+<span class="string">&quot;平均工资:&quot;</span>+salary);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">运行结果：</span><br><span class="line">开发人员平均工资:10000.0</span><br></pre></td></tr></table></figure></li><li><p>实例变量：独立于方法之外的变量，不过没有 static 修饰。</p><ul><li>实例变量声明在一个类中，但在方法、构造方法和语句块之外；</li><li>当一个对象被实例化之后，每个实例变量的值就跟着确定；</li><li>实例变量在对象创建的时候创建，在对象被销毁的时候销毁；</li><li>实例变量的值应该至少被一个方法、构造方法或者语句块引用，使得外部能够通过这些方式获取实例变量信息；</li><li>实例变量可以声明在使用前或者使用后；</li><li>访问修饰符可以修饰实例变量；</li><li>实例变量对于类中的方法、构造方法或者语句块是可见的。一般情况下应该把实例变量设为私有。通过使用访问修饰符可以使实例变量对子类可见；</li><li>实例变量具有默认值。数值型变量的默认值是0，布尔型变量的默认值是false，引用类型变量的默认值是null。变量的值可以在声明时指定，也可以在构造方法中指定；</li><li>实例变量可以直接通过变量名访问。但在静态方法以及其他类中，就应该使用完全限定名：ObjectReference.VariableName。</li></ul><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span>&#123;</span><br><span class="line">   <span class="comment">// 这个实例变量对子类可见</span></span><br><span class="line">   <span class="keyword">public</span> String name;</span><br><span class="line">   <span class="comment">// 私有变量，仅在该类可见</span></span><br><span class="line">   <span class="keyword">private</span> <span class="type">double</span> salary;</span><br><span class="line">   <span class="comment">//在构造器中对name赋值</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Employee</span> <span class="params">(String empName)</span>&#123;</span><br><span class="line">      name = empName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//设定salary的值</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> empSal)</span>&#123;</span><br><span class="line">      salary = empSal;</span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="comment">// 打印信息</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printEmp</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;名字 : &quot;</span> + name );</span><br><span class="line">      System.out.println(<span class="string">&quot;薪水 : &quot;</span> + salary);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">      <span class="type">Employee</span> <span class="variable">empOne</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Loo&quot;</span>);</span><br><span class="line">      empOne.setSalary(<span class="number">1000.0</span>);</span><br><span class="line">      empOne.printEmp();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">运行结果：</span><br><span class="line">名字 : Loo</span><br><span class="line">薪水 : 1000.0</span><br></pre></td></tr></table></figure></li><li><p>局部变量：类的方法中的变量。</p><ul><li>局部变量声明在方法、构造方法或者语句块中；</li><li>局部变量在方法、构造方法、或者语句块被执行的时候创建，当它们执行完成后，变量将会被销毁；</li><li>访问修饰符不能用于局部变量；</li><li>局部变量只在声明它的方法、构造方法或者语句块中可见；</li><li>局部变量是在栈上分配的。</li><li>局部变量没有默认值，所以局部变量被声明后，必须经过初始化，才可以使用。</li></ul><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123; </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pupAge</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">0</span>;   <span class="comment">// age变量不初始化，编译报错（variable number might not have been initialized）</span></span><br><span class="line">      age = age + <span class="number">7</span>;</span><br><span class="line">      System.out.println(<span class="string">&quot;小狗的年龄是: &quot;</span> + age);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">      <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">      test.pupAge();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">运行结果：</span><br><span class="line">小狗的年龄是: 7</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="变量在计算机中的底层原理"><a href="#变量在计算机中的底层原理" class="headerlink" title="变量在计算机中的底层原理"></a>变量在计算机中的底层原理</h4><ul><li><p>变量存储的是数据的二进制形式</p></li><li><p>数据变二进制的规则</p><ul><li>逢二进一&#x2F;除二取余</li></ul></li><li><p>文字怎么存储到计算机底层</p><ul><li><p>ASCII编码表固定了常见字符对应数字</p><ul><li>存储字符对应二进制形式</li><li>‘a’–&gt;97–&gt;01100001</li><li>‘A’–&gt;65–&gt;01000001</li><li>‘0’–&gt;48–&gt;00110000</li></ul></li></ul></li><li><p>图片、音视频，存储均为二进制形式</p></li></ul><h3 id="➕补充知识：进制转换"><a href="#➕补充知识：进制转换" class="headerlink" title="➕补充知识：进制转换"></a>➕补充知识：进制转换</h3><p>可使用电脑自带的计算机，换成程序员模式即可</p><ul><li><p>二进制转换成十进制</p></li><li><p>二进制转换成8进制</p><ul><li>01011101–&gt;01   011   101–&gt;135</li></ul></li><li><p>二进制转换成16进制</p><ul><li>01011101–&gt;0101   1101–&gt;5D</li></ul></li></ul><h3 id="关键字、标识符"><a href="#关键字、标识符" class="headerlink" title="关键字、标识符"></a>关键字、标识符</h3><ul><li><p>关键字</p><ul><li>Java自己使用的，不能用来取名字，否则会报错，不用背</li></ul></li></ul><table><thead><tr><th align="center">类别</th><th align="center">关键字</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">访问控制</td><td align="center">private</td><td align="center">私有的</td></tr><tr><td align="center"></td><td align="center">protected</td><td align="center">受保护的</td></tr><tr><td align="center"></td><td align="center">public</td><td align="center">公共的</td></tr><tr><td align="center"></td><td align="center">default</td><td align="center">默认</td></tr><tr><td align="center">类、方法和变量修饰符</td><td align="center">abstract</td><td align="center">声明抽象</td></tr><tr><td align="center"></td><td align="center">class</td><td align="center">类</td></tr><tr><td align="center"></td><td align="center">extends</td><td align="center">扩充,继承</td></tr><tr><td align="center"></td><td align="center">final</td><td align="center">最终值,不可改变的</td></tr><tr><td align="center"></td><td align="center">implements</td><td align="center">实现（接口）</td></tr><tr><td align="center"></td><td align="center">interface</td><td align="center">接口</td></tr><tr><td align="center"></td><td align="center">native</td><td align="center">本地，原生方法（非 Java 实现）</td></tr><tr><td align="center"></td><td align="center">new</td><td align="center">新,创建</td></tr><tr><td align="center"></td><td align="center">static</td><td align="center">静态</td></tr><tr><td align="center"></td><td align="center">strictfp</td><td align="center">严格,精准</td></tr><tr><td align="center"></td><td align="center">synchronized</td><td align="center">线程,同步</td></tr><tr><td align="center"></td><td align="center">transient</td><td align="center">短暂</td></tr><tr><td align="center"></td><td align="center">volatile</td><td align="center">易失</td></tr><tr><td align="center">程序控制语句</td><td align="center">break</td><td align="center">跳出循环</td></tr><tr><td align="center"></td><td align="center">case</td><td align="center">定义一个值以供 switch 选择</td></tr><tr><td align="center"></td><td align="center">continue</td><td align="center">继续</td></tr><tr><td align="center"></td><td align="center">default</td><td align="center">默认</td></tr><tr><td align="center"></td><td align="center">do</td><td align="center">运行</td></tr><tr><td align="center"></td><td align="center">else</td><td align="center">否则</td></tr><tr><td align="center"></td><td align="center">for</td><td align="center">循环</td></tr><tr><td align="center"></td><td align="center">if</td><td align="center">如果</td></tr><tr><td align="center"></td><td align="center">instanceof</td><td align="center">实例</td></tr><tr><td align="center"></td><td align="center">return</td><td align="center">返回</td></tr><tr><td align="center"></td><td align="center">switch</td><td align="center">根据值选择执行</td></tr><tr><td align="center"></td><td align="center">while</td><td align="center">循环</td></tr><tr><td align="center">错误处理</td><td align="center">assert</td><td align="center">断言表达式是否为真</td></tr><tr><td align="center"></td><td align="center">catch</td><td align="center">捕捉异常</td></tr><tr><td align="center"></td><td align="center">finally</td><td align="center">有没有异常都执行</td></tr><tr><td align="center"></td><td align="center">throw</td><td align="center">抛出一个异常对象</td></tr><tr><td align="center"></td><td align="center">throws</td><td align="center">声明一个异常可能被抛出</td></tr><tr><td align="center"></td><td align="center">try</td><td align="center">捕获异常</td></tr><tr><td align="center">包相关</td><td align="center">import</td><td align="center">引入</td></tr><tr><td align="center"></td><td align="center">package</td><td align="center">包</td></tr><tr><td align="center">变量引用</td><td align="center">super</td><td align="center">父类,超类</td></tr><tr><td align="center"></td><td align="center">this</td><td align="center">本类</td></tr><tr><td align="center"></td><td align="center">void</td><td align="center">无返回值</td></tr><tr><td align="center">保留关键字</td><td align="center">goto</td><td align="center">是关键字，但不能使用</td></tr><tr><td align="center"></td><td align="center">const</td><td align="center">是关键字，但不能使用</td></tr></tbody></table><p>❗<strong>注意：</strong>Java 的 null 不是关键字，类似于 true 和 false，它是一个字面常量，不允许作为标识符使用。</p><ul><li><p>标识符</p><ul><li><p>规则：不能数字开头，不能使用关键字，区分大小写</p><ul><li><strong>建议使用”驼峰式“命名法，如”studyJava“</strong></li></ul><p>❗注意:所有的标识符都应该以字母（A-Z 或者 a-z）,美元符（$）、或者下划线（_）开始</p><ul><li>首字符之后可以是字母（A-Z 或者 a-z）,美元符（$）、下划线（_）或数字的任何字符组合</li><li>关键字不能用作标识符</li><li>标识符是大小写敏感的</li><li>合法标识符举例：age、$salary、_value、__1_value</li><li>非法标识符举例：123abc、-salary</li></ul></li></ul></li></ul><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><h4 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h4><p>运算中，不同类型的数据先转化为同一类型，然后进行运算。转换从低级到高级。</p><table><thead><tr><th>低  ————————————————————-&gt;  高</th></tr></thead><tbody><tr><td>byte→short—&gt; int —&gt; long—&gt; float —&gt; double</td></tr><tr><td>char—&gt; int</td></tr></tbody></table><p>数据类型转换必须满足如下规则：</p><ul><li><ol><li>不能对boolean类型进行类型转换。</li></ol></li><li><ol start="2"><li>不能把对象类型转换成不相关类的对象。</li></ol></li><li><ol start="3"><li>在把容量大的类型转换为容量小的类型时必须使用强制类型转换。</li></ol></li><li><ol start="4"><li>转换过程中可能导致溢出或损失精度，例如：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">128</span>;   </span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">byte</span>)i;</span><br></pre></td></tr></table></figure><p>因为 byte 类型是 8 位，最大值为127，所以当 int 强制转换为 byte 类型时，值 128 时候就会导致溢出。</p></li><li><ol start="5"><li>浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入，例如：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="type">int</span>)<span class="number">23.7</span> == <span class="number">23</span>;        </span><br><span class="line">(<span class="type">int</span>)-<span class="number">45.89f</span> == -<span class="number">45</span></span><br></pre></td></tr></table></figure></li></ul><p>必须满足转换前的数据类型的位数要低于转换后的数据类型，例如: short数据类型的位数为16位，就可以自动转换位数为32的int类型，同样float数据类型的位数为32，可以自动转换为64位的double类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZiDongLeiXingZhuanHuan</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">            <span class="type">char</span> c1=<span class="string">&#x27;a&#x27;</span>;<span class="comment">//定义一个char类型</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> c1;<span class="comment">//char自动类型转换为int</span></span><br><span class="line">            System.out.println(<span class="string">&quot;char自动类型转换为int后的值等于&quot;</span>+i1);</span><br><span class="line">            <span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;<span class="comment">//定义一个char类型</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> c2+<span class="number">1</span>;<span class="comment">//char 类型和 int 类型计算</span></span><br><span class="line">            System.out.println(<span class="string">&quot;char类型和int计算后的值等于&quot;</span>+i2);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">运行结果：</span><br><span class="line">char自动类型转换为int后的值等于97</span><br><span class="line">char类型和int计算后的值等于66</span><br></pre></td></tr></table></figure><h4 id="表达式的自动类型转换"><a href="#表达式的自动类型转换" class="headerlink" title="表达式的自动类型转换"></a>表达式的自动类型转换</h4><table><thead><tr><th>低  ————————————————————-&gt;  高</th></tr></thead><tbody><tr><td>byte，short，char—&gt; int —&gt; long—&gt; float —&gt; double</td></tr></tbody></table><ul><li><p>表达式的最终结果类型由最高类型决定；</p></li><li><p>在表达式中，byte、short、char是直接转换成int类型进行运算</p></li></ul><h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h4><ul><li><ol><li>条件是转换的数据类型必须是兼容的。</li></ol></li><li><ol start="2"><li>格式:数据类型 变量2&#x3D;（数据类型）变量1、数据</li><li>强制类型转换可能造成数据（丢失）溢出</li></ol><p> 实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QiangZhiZhuanHuan</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">123</span>;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">byte</span>)i1;<span class="comment">//强制类型转换为byte</span></span><br><span class="line">        System.out.println(<span class="string">&quot;int强制类型转换为byte后的值等于&quot;</span>+b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">运行结果:</span><br><span class="line">int强制类型转换为byte后的值等于123</span><br></pre></td></tr></table></figure></li></ul><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>对字面量或变量进行操作的符号,并且有优先级</p><ul><li><p>算数运算符（+  -  *   &#x2F;   %）</p></li><li><p>“+”和字符串运算作连接符，结果是一个字符串</p></li><li><p>自增自减运算符（++  –）</p><p>注意：只能操作变量，放前放后结果不一样</p><p>单独使用放前后无区别</p><p>非单独使用:放变量前&#x3D;&#x3D;&gt;先进行变量自增&#x2F;自减，再使用变量</p><p>​放变量后&#x3D;&#x3D;&gt;先使用变量，在进行变量自增&#x2F;自减。</p></li><li><p>赋值运算符（&#x3D;  +&#x3D;  -&#x3D;  *&#x3D;  &#x2F;&#x3D;  %&#x3D;）</p><p>注意:+&#x3D;  -&#x3D;  *&#x3D;  &#x2F;&#x3D;  %&#x3D;这些拓展赋值运算符隐含了强制类型转换</p></li><li><p>关系运算符（&#x3D;&#x3D;  !&#x3D;  &gt; &gt;&#x3D;  &lt;  &lt;&#x3D;）</p><p>注意：返回值类型为布尔结果（true，false）</p></li><li><p>逻辑运算符（&amp;  |  !  ^  &amp;&amp;  ||）</p><p>&amp;     逻辑与，有一个为false，结果为false</p><p>|     逻辑或，有一个为true，结果为true</p><p>!      逻辑非，!true&#x3D;false，!false&#x3D;true</p><p>^     同flase，不同true（同性相斥，异性相吸）</p><p>&amp;&amp;      短路与，一个为false，结果为false（前一个为false，后一个条件不执行）</p><p>||     短路或，一个为true，结果为true(前一个为true,后一个条件不执行)</p></li><li><p>三元运算符</p><p>格式：条件表达式？值1：值2;</p></li></ul><h3 id="❓案例知识：键盘录入技术"><a href="#❓案例知识：键盘录入技术" class="headerlink" title="❓案例知识：键盘录入技术"></a>❓案例知识：键盘录入技术</h3><p>API（Application Programming Interface）：应用程序编程接口</p><p>Java API文档下载：<a href="https://docs.oracle.com/en/java/javase/18/docs/api/index.html">jdk-18api文档</a>huan</p><p> 实现方法：</p><ol><li><p>导包：告诉程序去JDK的哪个包里找扫描器技术</p></li><li><p>写一行代码得到键盘扫描器对象</p></li><li><p>等待接收用户输入数据</p><p>注意：System,String在JDK中的Java.lang包下，是默认的包，不需要我们导入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;  <span class="comment">//导包</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]args)</span>&#123;</span><br><span class="line">        Scanner sc=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);<span class="comment">//得到一个键盘扫描器对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入你的年龄：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> age=sc.nextInt();<span class="comment">//调用sc对象    `输入数据</span></span><br><span class="line">        System.out.println(<span class="string">&quot;年龄是：&quot;</span>+age);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入你的名字：&quot;</span>);</span><br><span class="line">        String name=sc.next();</span><br><span class="line">        System.out.println(<span class="string">&quot;名字是：&quot;</span>+name);        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记（一）</title>
      <link href="/post/7d34cd4f.html"/>
      <url>/post/7d34cd4f.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java快速入门、IDEA开发工具的使用"><a href="#Java快速入门、IDEA开发工具的使用" class="headerlink" title="Java快速入门、IDEA开发工具的使用"></a>Java快速入门、IDEA开发工具的使用</h1><h2 id="Java概述"><a href="#Java概述" class="headerlink" title="Java概述"></a>Java概述</h2><h3 id="Java是sun公司1995年推出的，2009年被Oracle收购"><a href="#Java是sun公司1995年推出的，2009年被Oracle收购" class="headerlink" title="Java是sun公司1995年推出的，2009年被Oracle收购"></a>Java是sun公司1995年推出的，2009年被Oracle收购</h3><h3 id="Java的爸爸：詹姆斯-高斯林"><a href="#Java的爸爸：詹姆斯-高斯林" class="headerlink" title="Java的爸爸：詹姆斯.高斯林"></a>Java的爸爸：詹姆斯.高斯林</h3><h3 id="Java是一门高级编程语言"><a href="#Java是一门高级编程语言" class="headerlink" title="Java是一门高级编程语言"></a>Java是一门高级编程语言</h3><h3 id="流行度高，商业占用率高"><a href="#流行度高，商业占用率高" class="headerlink" title="流行度高，商业占用率高"></a>流行度高，商业占用率高</h3><h3 id="重要特性：可移植性"><a href="#重要特性：可移植性" class="headerlink" title="重要特性：可移植性"></a>重要特性：可移植性</h3><h3 id="Java用来干啥？"><a href="#Java用来干啥？" class="headerlink" title="Java用来干啥？"></a>Java用来干啥？</h3><ul><li>万物皆可，最被市场认可的是企业级开发（如淘宝、京东这样的互联网系统）</li></ul><h3 id="Java的技术体系"><a href="#Java的技术体系" class="headerlink" title="Java的技术体系"></a>Java的技术体系</h3><ul><li><p>JavaSE</p><ul><li>标准版：Java技术的核心和基础</li></ul></li><li><p>JavaEE</p><ul><li>企业版：大型互联网企业级解决方案，充分被市场认可的</li></ul></li><li><p>JavaME</p><ul><li>小型版：移动应用的解决方案，未被市场认可</li></ul></li></ul><h2 id="Java产品"><a href="#Java产品" class="headerlink" title="Java产品"></a>Java产品</h2><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><ul><li>开发者工具包，必须安装才可使用</li></ul><h3 id="Oracle官网"><a href="#Oracle官网" class="headerlink" title="Oracle官网"></a><a href="https://www.java.com/zh-CN/download/">Oracle官网</a></h3><ul><li>下载，安装时路径避免使用中文和空格</li></ul><h3 id="常用的有JDK-8（企业常用）-JDK-11-学习使用-JDK-17"><a href="#常用的有JDK-8（企业常用）-JDK-11-学习使用-JDK-17" class="headerlink" title="常用的有JDK-8（企业常用）,JDK-11(学习使用),JDK-17"></a>常用的有JDK-8（企业常用）,JDK-11(学习使用),JDK-17</h3><h3 id="LTS：长期支持版本：JDK-8-JDK-11-JDK-17"><a href="#LTS：长期支持版本：JDK-8-JDK-11-JDK-17" class="headerlink" title="LTS：长期支持版本：JDK-8,JDK-11,JDK-17"></a>LTS：长期支持版本：JDK-8,JDK-11,JDK-17</h3><h3 id="JDK中重要的2个程序："><a href="#JDK中重要的2个程序：" class="headerlink" title="JDK中重要的2个程序："></a>JDK中重要的2个程序：</h3><ul><li><p>Javac</p><ul><li>编译程序</li></ul></li><li><p>Java</p><ul><li>执行程序</li></ul></li></ul><h3 id="JDK安装后验证是否安装成功"><a href="#JDK安装后验证是否安装成功" class="headerlink" title="JDK安装后验证是否安装成功"></a>JDK安装后验证是否安装成功</h3><ul><li><p>打开命令行窗口</p><ul><li>WIN+R—&gt;cmd回车</li></ul></li><li><p>依次输入Java、Javac、Java-version…….判断</p></li></ul><h3 id="补充知识：常用命令行命令"><a href="#补充知识：常用命令行命令" class="headerlink" title="补充知识：常用命令行命令"></a>补充知识：常用命令行命令</h3><ul><li><p>cls</p><ul><li>清屏</li></ul></li><li><p>cd</p><ul><li><p>进入或回退</p><ul><li><p>cd xxx</p><ul><li>进入单级目录</li></ul></li><li><p>cd x:\xxx\xxx</p><ul><li>进入多级目录</li></ul></li><li><p>cd ..</p><ul><li>回退上一级目录</li></ul></li><li><p>cd \</p><ul><li>回退到盘符根目录</li></ul></li></ul></li></ul></li><li><p>dir</p><ul><li>查看当前路径下的文件信息</li></ul></li><li><p>盘符：</p><ul><li>切换到某个盘下（如D：）</li></ul></li></ul><h2 id="开发一个Java入门程序：HelloWorld"><a href="#开发一个Java入门程序：HelloWorld" class="headerlink" title="开发一个Java入门程序：HelloWorld"></a>开发一个Java入门程序：HelloWorld</h2><h3 id="1、编写代码"><a href="#1、编写代码" class="headerlink" title="1、编写代码"></a>1、编写代码</h3><ul><li>建议全英文名称，首字母大写，后缀.java结尾</li><li>代码：<br>public class HelloWorld{<br>      public static void main(String[]args){<br>         System.out.println(“Hello World”);<br>       }<br>  }</li></ul><h3 id="2、编译代码"><a href="#2、编译代码" class="headerlink" title="2、编译代码"></a>2、编译代码</h3><ul><li><p>javac HelloWorld.java</p><ul><li><p>产生.class文件</p><ul><li>HelloWorld.class</li></ul></li></ul></li></ul><h3 id="3、执行代码"><a href="#3、执行代码" class="headerlink" title="3、执行代码"></a>3、执行代码</h3><ul><li><p>java HelloWorld</p><ul><li>输出：Hello World</li></ul></li></ul><h2 id="Java程序的执行原理"><a href="#Java程序的执行原理" class="headerlink" title="Java程序的执行原理"></a>Java程序的执行原理</h2><h3 id="Java语言最后会翻译，解释成计算机能够识别的机器语言：000111……-以此驱动机器干活"><a href="#Java语言最后会翻译，解释成计算机能够识别的机器语言：000111……-以此驱动机器干活" class="headerlink" title="Java语言最后会翻译，解释成计算机能够识别的机器语言：000111…….以此驱动机器干活"></a>Java语言最后会翻译，解释成计算机能够识别的机器语言：000111…….以此驱动机器干活</h3><h3 id="BUG"><a href="#BUG" class="headerlink" title="BUG"></a>BUG</h3><ul><li><p>代表程序出现问题或者漏洞的意思</p></li><li><p>DEBUG</p><ul><li>解决问题的意思</li></ul></li></ul><h2 id="Path环境变量，JAVA-HOME"><a href="#Path环境变量，JAVA-HOME" class="headerlink" title="Path环境变量，JAVA_HOME"></a>Path环境变量，JAVA_HOME</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>记住程序的路径，方便在命令行的任意目录驱动程序</li></ul><h3 id="注意：新版本JDK安装时会自动配置Javac和Java的路径，可直接在命令行窗口使用；老版本则需手动配置Path环境变量"><a href="#注意：新版本JDK安装时会自动配置Javac和Java的路径，可直接在命令行窗口使用；老版本则需手动配置Path环境变量" class="headerlink" title="注意：新版本JDK安装时会自动配置Javac和Java的路径，可直接在命令行窗口使用；老版本则需手动配置Path环境变量"></a>注意：新版本JDK安装时会自动配置Javac和Java的路径，可直接在命令行窗口使用；老版本则需手动配置Path环境变量</h3><ul><li>Path—&gt;D:\Program Files\Java\jdk-11.0.13\bin</li></ul><h3 id="JAVA-HOME"><a href="#JAVA-HOME" class="headerlink" title="JAVA_HOME"></a>JAVA_HOME</h3><ul><li>D:\Program Files\Java\jdk-11.0.13</li></ul><h3 id="多学一招"><a href="#多学一招" class="headerlink" title="多学一招"></a>多学一招</h3><ul><li><p>Path—&gt;D:\Program Files\Java\jdk-11.0.13\bin          </p></li><li><p>Path—&gt;%JAVA_HOME%\bin</p><ul><li>建议手动配置时使用此方法</li></ul></li></ul><h2 id="开发工具：Intellij-IDEA"><a href="#开发工具：Intellij-IDEA" class="headerlink" title="开发工具：Intellij IDEA"></a>开发工具：Intellij IDEA</h2><h3 id="集成开发工具（IDE工具）"><a href="#集成开发工具（IDE工具）" class="headerlink" title="集成开发工具（IDE工具）"></a>集成开发工具（IDE工具）</h3><ul><li>好处：工程结构化管理项目，有报错提醒，代码智能补全……</li></ul><h3 id="官网下载"><a href="#官网下载" class="headerlink" title="官网下载"></a><a href="https://www.jetbrains.com/idea/">官网下载</a></h3><ul><li>傻瓜式安装</li></ul><h3 id="IDEA开发第一个Java程序"><a href="#IDEA开发第一个Java程序" class="headerlink" title="IDEA开发第一个Java程序"></a>IDEA开发第一个Java程序</h3><ul><li>1、创建工程project（建议选择空工程），指派一个工程存放路径</li><li>2、必须创建模块module</li><li>3、创建一个包package</li><li>4、创建一个类class</li></ul><h3 id="补充知识：IDEA常用快捷键"><a href="#补充知识：IDEA常用快捷键" class="headerlink" title="补充知识：IDEA常用快捷键"></a>补充知识：IDEA常用快捷键</h3><p>- </p><h2 id="Java基础语法"><a href="#Java基础语法" class="headerlink" title="Java基础语法"></a>Java基础语法</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul><li><p>作用：对程序进行解释说明，不影响程序执行</p></li><li><p>分类</p><ul><li><p>单行注释:       &#x2F;&#x2F;——-</p></li><li><p>多行注释：     &#x2F;* *&#x2F;</p></li><li><p>文档注释：  &#x2F;**  *&#x2F;</p><ul><li>注意：文档注释的内容可以提取到文档说明书中去</li></ul></li></ul></li><li><p>为什么不影响程序执行？</p><ul><li>编译后的.class文件没有注释</li></ul></li></ul><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><ul><li><p>目的：告诉程序员数据在程序中该怎样书写</p></li><li><p>分类</p><ul><li></li></ul></li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>作用：内存中的一块区域，可以存储数据，且数据可变化</li><li>格式：数据类型  变量名称 &#x3D; 初始值；</li><li>&#x3D; 赋值：从右往左执行</li></ul><h3 id="变量使用注意事项"><a href="#变量使用注意事项" class="headerlink" title="变量使用注意事项"></a>变量使用注意事项</h3><ul><li>1.变量必须先声明才能使用</li><li>2.什么类型的变量只能存放什么类型的数据</li><li>3.变量从定义开始到‘}’有效，同一个有效范围内不能重新定义重名的变量</li><li>4.变量定义的时候可以没有初始值，但使用的时候必须有初始值（如 int age;）</li></ul><h3 id="变量在计算机中的底层原理"><a href="#变量在计算机中的底层原理" class="headerlink" title="变量在计算机中的底层原理"></a>变量在计算机中的底层原理</h3><ul><li><p>变量存储的是数据的二进制形式</p></li><li><p>数据变二进制的规则</p><ul><li>逢二进一&#x2F;除二取余</li></ul></li><li><p>文字怎么存储到计算机底层</p><ul><li><p>ASCII编码表固定了常见字符对应数字</p><ul><li>存储字符对应二进制形式</li><li>’a’–&gt;97–&gt;01100001</li><li>‘A’–&gt;65–&gt;01000001</li><li>‘0’–&gt;48–&gt;00110000</li></ul></li></ul></li><li><p>图片、音视频，存储均为二进制形式</p></li><li><p>补充知识</p><ul><li><p>二进制转换成十进制</p></li><li><p>二进制转换成8进制</p><ul><li>01011101–&gt;01   011   101–&gt;135</li></ul></li><li><p>二进制转换成16进制</p><ul><li>01011101–&gt;0101   1101–&gt;5D</li></ul></li></ul></li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li><p>定义变量：   数据类型  变量名称 &#x3D; 初始值；</p></li><li><p>作用：约束变量只能存储什么类型的数据，帮助定义出不同类型的变量</p></li><li><p>分类</p><ul><li><p>引用数据类型（后面详见）</p><ul><li>String</li></ul></li><li><p>基本数据类型</p><ul><li><p>整型</p><ul><li><p>byte：字节整型</p><ul><li><p>占1个字节内存</p><ul><li>范围：-128~127</li></ul></li></ul></li><li><p>short：短整型</p><ul><li>占2个字节内存</li></ul></li><li><p>int：整型（默认）</p><ul><li>占4个字节内存</li></ul></li><li><p>long：长整型</p><ul><li><p>占8个字节内存</p><ul><li>随便写整型字面量，默认是int类型，需在后面加上L&#x2F;l</li></ul></li></ul></li></ul></li><li><p>浮点型（小数）</p><ul><li><p>float：单精度</p><ul><li><p>占4个字节内存</p><ul><li>随便写小数字面量，默认是double类型，需在后面加上F&#x2F;f</li></ul></li></ul></li><li><p>double：双精度</p><ul><li>占8个字节内存</li></ul></li></ul></li><li><p>字符型</p><ul><li><p>char</p><ul><li>占2个字节内存</li></ul></li></ul></li><li><p>布尔型</p><ul><li><p>boolean</p><ul><li>占1个字节内存</li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="关键字、标识符"><a href="#关键字、标识符" class="headerlink" title="关键字、标识符"></a>关键字、标识符</h3><ul><li><p>关键字</p><ul><li>Java自己使用的，不能用来取名字</li></ul></li><li><p>标识符</p><ul><li><p>规则：不能数字开头，不能使用关键字，区分大小写</p><ul><li>建议使用”驼峰式“命名法，如”studyJava“</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 思维导图 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/about.html"/>
      <url>/post/about.html</url>
      
        <content type="html"><![CDATA[<p>大家好，这是我的第一篇博客。😋😋😋</p><p>我叫Looanthony，男，👨‍💻计算机科学与技术专业👨‍💻在读大学生。</p><p>对于刚读大一的我来说，在平常的学习中只浅浅学过一些HTML语言、C语言、Java语言，在修改代码的过程中一堆东西都看不懂，修改的过程中只有不断尝试和理解，马上即将踏入大二学习的我，趁着暑假的机会多多学习，这不能算是内卷，因为山外有山，人外有人！</p><p>搭建这个个人博客采用的GitHub和Hexo框架，而Hexo框架采用的主题是butterfly，这个框架的渲染效果挺棒的，但是由于是白嫖的，比如文章末尾的评论系统，别问为什么，问就是没钱！！！当然我将自己的联系方式放在了肉眼可见的地方，你们可以通过github，QQ-email，QQ等方式和我联系，同时右下角的在线聊天系统也打开了，也能和我进行一对一聊天！</p><p>如果你觉得有用或者喜欢这个的话，不妨点击下面的打赏对Loo支持👍👍👍一波吧。当然，别忘了在文章末尾留言评论！！！</p>]]></content>
      
      
      <categories>
          
          <category> 简介 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简介 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
